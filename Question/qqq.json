{
  "qa": [
    {
      "question": "Стандартний тег для образу Docker",
      "options": ["latest", "stable", "default", "current"],
      "answer": "latest",
      "explanation": "Стандартний тег для образу Docker - це latest. Тег latest використовується за замовчуванням, якщо інший тег не вказаний під час створення або завантаження образу."
    },
    {
      "question": "Який інструмент використовується для взаємодії з запущеними контейнерами",
      "options": ["checkov", "ctop", "lazydocker", "dive"],
      "answer": "ctop",
      "explanation": "Для взаємодії з запущеними контейнерами використовується інструмент ctop. Він надає зручний інтерфейс для моніторингу та керування запущеними контейнерами Docker в реальному часі."
    },
    {
      "question": "Чи може Dockerfile містити інструкції ENTRYPOINT та CMD",
      "options": ["так", "так, але з версії 3", "так, але не разом", "ні"],
      "answer": "так",
      "explanation": "Dockerfile може містити інструкції ENTRYPOINT та CMD разом. ENTRYPOINT визначає основну команду, яка буде виконуватися при запуску контейнера, тоді як CMD забезпечує аргументи за замовчуванням для ENTRYPOINT."
    },
    {
      "question": "Якою командою ми можемо запустити docker compose",
      "options": [
        "docker-compose begin",
        "docker-compose execute",
        "docker-compose launch",
        "docker-compose up"
      ],
      "answer": "docker-compose up",
      "explanation": "Команда, якою ми можемо запустити Docker Compose, - це docker-compose up. Ця команда створює і запускає контейнери, зазначені у файлі docker-compose.yml."
    },
    {
      "question": "Яка команда публікує образ",
      "options": [
        "docker publich",
        "docker build",
        "docker pull",
        "docker push"
      ],
      "answer": "docker push",
      "explanation": "Команда, яка публікує образ, - це docker push. Вона використовується для завантаження локального образу Docker на реєстр, такий як Docker Hub або приватний реєстр Docker."
    },
    {
      "question": "Яка команда виконує перевірку Docker на вразливості",
      "options": [
        "docker inspect",
        "docker test",
        "docker analysis",
        "docker scan"
      ],
      "answer": "docker scan",
      "explanation": "Команда, яка виконує перевірку Docker на вразливості, - це docker scan. Вона аналізує образи Docker та інформує про вразливості, які можуть бути виявлені."
    },
    {
      "question": "Який інструмент використовується для аналізу споживання ресурсів контейнером",
      "options": ["dive", "lazydocker", "ctop", "checkov"],
      "answer": "ctop",
      "explanation": "Для аналізу споживання ресурсів контейнером використовується інструмент ctop. Він дозволяє моніторити використання CPU, пам'яті, мережі та дискового простору контейнерами в реальному часі."
    },
    {
      "question": "Якою командою можна запустити новий процес у контейнері",
      "options": [
        "docker exec",
        "docker build",
        "docker connect",
        "docker attach"
      ],
      "answer": "docker exec",
      "explanation": "Команда, якою можна запустити новий процес у контейнері, - це docker exec. Вона дозволяє виконати новий процес усередині запущеного контейнера."
    },
    {
      "question": "Якою командою ми запускаємо Docker Swarm",
      "options": [
        "docker swarm init",
        "docker swarm run",
        "docker swarm start",
        "docker swarm up"
      ],
      "answer": "docker swarm init",
      "explanation": "Команда, якою ми запускаємо Docker Swarm, - це docker swarm init. Вона ініціалізує новий Swarm і перетворює поточний Docker Engine на керуючий (manager)."
    },
    {
      "question": "Якщо перезапустити контейнер, дані у ньому збережуться?",
      "options": ["їх ніколи і не було", "так", "ні", "так, але застарілі"],
      "answer": "так",
      "explanation": "Якщо перезапустити контейнер, дані у ньому збережуться. Рекомендується використовувати томи Docker для зберігання даних, які необхідно зберегти незалежно від контейнера."
    },
    {
      "question": "Скільки контейнерів є у одному docker compose сервісі",
      "options": ["1", "безліч", "2", "сервіс не містить контейнерів"],
      "answer": "безліч",
      "explanation": "Один Docker Compose сервіс може містити безліч контейнерів. Кожен з цих сервісів може використовувати один або кілька контейнерів для виконання своїх завдань."
    },
    {
      "question": "Що таке нода у Docker Swarm",
      "options": ["хост", "контейнер", "docker", "сервіс"],
      "answer": "хост",
      "explanation": "У Docker Swarm нода - це хост. Нода (node) - це окремий Docker Engine, який приєднаний до кластеру Swarm."
    },
    {
      "question": "Docker контейнер створюється з",
      "options": ["контейнеру", "образу", "шаблону", "сайту"],
      "answer": "образу",
      "explanation": "Docker контейнер створюється з образу. Образ Docker є основою для створення контейнера і містить всі необхідні файли та конфігурації для запуску програми."
    },
    {
      "question": "Який інструмент використовується для аналізу Dockerfile",
      "options": ["dive", "ctop", "checkov", "lazydocker"],
      "answer": "checkov",
      "explanation": "Для аналізу Dockerfile використовується інструмент checkov. Він допомагає виявляти помилки конфігурації, потенційні уразливості та недотримання найкращих практик."
    },
    {
      "question": "Для чого потрібна інструкція ENTRYPOINT",
      "options": [
        "Для встановлення базового образу",
        "Для розділення образу на рівні",
        "Для копіювання файлів у контейнер",
        "Для запуску основного процесу у контейнері"
      ],
      "answer": "Для запуску основного процесу у контейнері",
      "explanation": "Інструкція ENTRYPOINT потрібна для запуску основного процесу у контейнері. Вона дозволяє визначити команду, яка буде виконуватися під час запуску контейнера."
    },
    {
      "question": "Команда docker ps повертає",
      "options": [
        "список образів",
        "неактивні контейнери",
        "доступні ресурси",
        "список запущених контейнерів"
      ],
      "answer": "список запущених контейнерів",
      "explanation": "Команда docker ps повертає список запущених контейнерів. Вона показує інформацію про всі контейнери, які зараз запущені на твоєму Docker хості."
    },
    {
      "question": "Яка повинна бути перша інструкція у Dockerfile",
      "options": ["FROM", "CMD", "RUN", "ENTRYPOINT"],
      "answer": "FROM",
      "explanation": "Перша інструкція у Dockerfile повинна бути FROM. Вона визначає базовий образ, на якому буде будуватися новий образ."
    },
    {
      "question": "Для чого потрібні multi stage docker образи",
      "options": [
        "для швидшої роботи",
        "для зменшення об’єму образу",
        "для дешевшої ціни образу",
        "для більшої к-сті контейнерів"
      ],
      "answer": "для зменшення об’єму образу",
      "explanation": "Multi-stage Docker образи потрібні для зменшення об’єму образу. Вони дозволяють створювати образи, які включають тільки необхідні файли та залежності, видаляючи все зайве."
    },
    {
      "question": "Якщо приєднати файл до контейнера через VOLUME чи можна змінити файл у контейнері",
      "options": [
        "ні",
        "так, але з іншого хоста",
        "так",
        "так, але з іншого контейнера"
      ],
      "answer": "так",
      "explanation": "Так, можна змінити файл у контейнері. VOLUME забезпечує двосторонній доступ до файлів, тобто зміни, внесені в контейнері, будуть відображені на хості, і навпаки."
    },
    {
      "question": "Який інструмент використовується для аналізу рівнів образів",
      "options": ["dive", "lazydocker", "ctop", "checkov"],
      "answer": "dive",
      "explanation": "Для аналізу рівнів образів використовується інструмент dive. Він дозволяє досліджувати структуру Docker образів і виявити можливі проблеми зі збільшенням розміру образу."
    },
    {
      "question": "Контейнери у docker-compose по замовчуванні запускаються",
      "options": [
        "по два одночасно",
        "паралельно",
        "docker compose не запускає контейнер",
        "послідовно"
      ],
      "answer": "паралельно",
      "explanation": "Контейнери у Docker Compose по замовчуванні запускаються паралельно. Усі зазначені сервіси запускаються одночасно, якщо інше не вказано в конфігурації."
    },
    {
      "question": "Якщо приєднати файл до контейнера через VOLUME чи можна змінити файл на хості",
      "options": [
        "так",
        "ні",
        "так, але з іншого хоста",
        "так, але з іншого контейнера"
      ],
      "answer": "так",
      "explanation": "Так, якщо приєднати файл або директорію до контейнера через VOLUME, ти можеш змінювати файл на хості. Це забезпечує двосторонній доступ до файлів."
    },
    {
      "question": "Якою командою можна приєднатись до запущеного контейнера",
      "options": [
        "docker connect",
        "docker build",
        "docker attach",
        "docker exec"
      ],
      "answer": "docker attach",
      "explanation": "Команда, якою можна приєднатися до запущеного контейнера, - це docker attach. Вона дозволяє підключитися до стандартного вводу, виводу та помилок запущеного контейнера."
    }
  ]
}
